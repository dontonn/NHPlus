package de.hitec.nhplus.utils;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.util.Arrays;
import java.util.Base64;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

/**
 * This class provides utility methods for password management.
 * It uses the PBKDF2WithHmacSHA1 algorithm for password hashing.
 */
public class PasswordUtil {
    // The algorithm used for password hashing
    private static final String ALGORITHM = "PBKDF2WithHmacSHA1";
    // The number of iterations for the password hashing algorithm
    private static final int ITERATIONS = 10000;
    // The length of the key generated by the password hashing algorithm
    private static final int KEY_LENGTH = 256;
    // The length of the salt generated for password hashing
    private static final int SALT_LENGTH = 20;
    // The delimiter used in the hashed password
    private static final String DELIMITER = ":";

    /**
     * This method generates a hashed password.
     * It first generates a salt, then hashes the password with the salt, and finally returns the salt and hashed password separated by a delimiter.
     *
     * @param password The password to be hashed.
     * @return The salt and hashed password.
     */
    public static String generatePassword(String password) {
        String salt = generateSalt();
        String hashed_password = hashPassword(password, salt);
        return salt + DELIMITER + hashed_password;
    }

    /**
     * This method hashes a password with a salt.
     * It first converts the password and salt to arrays of characters and bytes, respectively.
     * Then it hashes the password using the PBKDF2WithHmacSHA1 algorithm and the specified number of iterations and key length.
     * Finally, it returns the hashed password as a string.
     *
     * @param password The password to be hashed.
     * @param salt The salt used for hashing.
     * @return The hashed password.
     */
    public static String hashPassword(String password, String salt) {
        char[] passwordChars = password.toCharArray();
        byte[] saltBytes = Base64.getDecoder().decode(salt);

        PBEKeySpec spec = new PBEKeySpec(passwordChars, saltBytes, ITERATIONS, KEY_LENGTH);
        Arrays.fill(passwordChars, Character.MIN_VALUE);

        try {
            SecretKeyFactory skf = SecretKeyFactory.getInstance(ALGORITHM);
            byte[] hash = skf.generateSecret(spec).getEncoded();
            return Base64.getEncoder().encodeToString(hash);
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            throw new AssertionError("Error while hashing a password: " + e.getMessage(), e);
        } finally {
            spec.clearPassword();
        }
    }

    /**
     * This method generates a salt for password hashing.
     * It generates a random array of bytes and returns it as a string.
     *
     * @return The generated salt.
     */
    public static String generateSalt() {
        SecureRandom random = new SecureRandom();
        byte[] bytes = new byte[SALT_LENGTH];
        random.nextBytes(bytes);
        return Base64.getEncoder().encodeToString(bytes);
    }

    /**
     * This method checks if a password matches a hashed password.
     * It first splits the hashed password into a salt and a hashed password.
     * Then it hashes the input password with the salt and checks if it matches the hashed password.
     *
     * @param password The password to be checked.
     * @param hashedPassword The hashed password to be checked against.
     * @return True if the password matches the hashed password, false otherwise.
     */
    public static boolean checkPassword(String password, String hashedPassword) {
        if (password == null || hashedPassword == null) { return false; }
        String[] parts = hashedPassword.split(DELIMITER);
        if (parts.length != 2) {
            throw new IllegalArgumentException("Invalid hashed password");
        }
        String salt = parts[0];
        String hashedInputPassword = hashPassword(password, salt);
        return hashedInputPassword.equals(parts[1]);
    }

    /**
     * NEW: Validates if a password meets the requirements:
     * - At least one number
     * - At least one letter
     * - At least one special character (+, -, .)
     */
    public static boolean validatePassword(String password) {
        if (password == null || password.isEmpty()) {
            return false;
        }

        boolean hasNumber = password.matches(".*\\d.*");
        boolean hasLetter = password.matches(".*[a-zA-Z].*");
        boolean hasSpecialChar = password.matches(".*[+\\-.].*");

        return hasNumber && hasLetter && hasSpecialChar;
    }

    /**
     * NEW: Returns detailed validation error message
     */
    public static String getPasswordValidationError(String password) {
        if (password == null || password.isEmpty()) {
            return "Passwort darf nicht leer sein";
        }

        boolean hasNumber = password.matches(".*\\d.*");
        boolean hasLetter = password.matches(".*[a-zA-Z].*");
        boolean hasSpecialChar = password.matches(".*[+\\-.].*");

        if (!hasNumber) {
            return "Passwort muss mindestens eine Zahl enthalten";
        }
        if (!hasLetter) {
            return "Passwort muss mindestens einen Buchstaben enthalten";
        }
        if (!hasSpecialChar) {
            return "Passwort muss mindestens ein Sonderzeichen (+, -, .) enthalten";
        }

        return null; // Passwort ist gültig
    }

    /**
     * This is a test method for the password utility methods.
     * It generates a hashed password for a test password and checks if the test password matches the hashed password.
     */
    public static void main(String[] args) {
        String password = "ø1§$%&/()=?``%password\uD83D\uDD25::::::";
        String hashedPassword = generatePassword(password);
        Boolean checkPassword = checkPassword(password, generatePassword(password));
        System.out.println(password);
        System.out.println(hashedPassword);
        System.out.println(checkPassword);
    }
}